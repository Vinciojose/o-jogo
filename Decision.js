/**
 * Modelo de Decis√£o Pol√≠tica
 * 
 * Representa uma decis√£o pol√≠tica que pode ser tomada pelos jogadores
 */

class Decision {
  constructor(data = {}) {
    this.id = data.id || null;
    this.title = data.title || '';
    this.description = data.description || '';
    this.options = data.options || [];
    this.category = data.category || 'geral';
    this.difficulty = data.difficulty || 'normal'; // easy, normal, hard
    this.created_at = data.created_at || new Date().toISOString();
  }

  /**
   * Valida a estrutura da decis√£o
   */
  validate() {
    const errors = [];

    if (!this.title || this.title.trim().length < 5) {
      errors.push('T√≠tulo deve ter pelo menos 5 caracteres');
    }

    if (!this.description || this.description.trim().length < 10) {
      errors.push('Descri√ß√£o deve ter pelo menos 10 caracteres');
    }

    if (!this.options || this.options.length < 2) {
      errors.push('Decis√£o deve ter pelo menos 2 op√ß√µes');
    }

    // Validar cada op√ß√£o
    this.options.forEach((option, index) => {
      if (!option.id || !option.text) {
        errors.push(`Op√ß√£o ${index + 1} deve ter ID e texto`);
      }

      if (!option.effects || typeof option.effects !== 'object') {
        errors.push(`Op√ß√£o ${index + 1} deve ter efeitos definidos`);
      }

      // Validar efeitos
      if (option.effects) {
        Object.keys(option.effects).forEach(indicator => {
          const value = option.effects[indicator];
          if (typeof value !== 'number' || value < -20 || value > 20) {
            errors.push(`Efeito ${indicator} na op√ß√£o ${index + 1} deve ser um n√∫mero entre -20 e 20`);
          }
        });
      }
    });

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * Gera uma decis√£o aleat√≥ria baseada no estado atual
   */
  static generateRandomDecision(stateIndicators, availableDecisions) {
    // Filtrar decis√µes baseadas no contexto do estado
    let relevantDecisions = availableDecisions.filter(decision => {
      return Decision.isDecisionRelevant(decision, stateIndicators);
    });

    if (relevantDecisions.length === 0) {
      relevantDecisions = availableDecisions;
    }

    // Selecionar decis√£o aleat√≥ria
    const randomIndex = Math.floor(Math.random() * relevantDecisions.length);
    return relevantDecisions[randomIndex];
  }

  /**
   * Verifica se uma decis√£o √© relevante para o estado atual
   */
  static isDecisionRelevant(decision, indicators) {
    // L√≥gica para determinar relev√¢ncia baseada nos indicadores
    switch (decision.id) {
      case 'investimento_saude':
        return indicators.saude < 40;
      
      case 'seguranca_publica':
        return indicators.seguranca < 40;
      
      case 'corrupcao_escandalo':
        return indicators.corrupcao > 60;
      
      case 'cultura_nacional':
        return indicators.cultura < 50;
      
      default:
        return true; // Decis√µes gerais sempre s√£o relevantes
    }
  }

  /**
   * Calcula o impacto total de uma op√ß√£o
   */
  static calculateOptionImpact(option) {
    let totalImpact = 0;
    Object.values(option.effects).forEach(effect => {
      totalImpact += Math.abs(effect);
    });
    return totalImpact;
  }

  /**
   * Gera texto de resultado baseado nos efeitos
   */
  static generateResultText(option, effects) {
    const positiveEffects = [];
    const negativeEffects = [];

    Object.keys(effects).forEach(indicator => {
      const value = effects[indicator];
      const indicatorName = Decision.getIndicatorDisplayName(indicator);
      
      if (value > 0) {
        positiveEffects.push(`${indicatorName} +${value}`);
      } else if (value < 0) {
        negativeEffects.push(`${indicatorName} ${value}`);
      }
    });

    let resultText = `Voc√™ escolheu: "${option.text}"\n\n`;
    
    if (positiveEffects.length > 0) {
      resultText += `‚úÖ Efeitos positivos: ${positiveEffects.join(', ')}\n`;
    }
    
    if (negativeEffects.length > 0) {
      resultText += `‚ùå Efeitos negativos: ${negativeEffects.join(', ')}\n`;
    }

    // Adicionar coment√°rios baseados nos efeitos
    const comments = Decision.generateEffectComments(effects);
    if (comments.length > 0) {
      resultText += `\nüí¨ ${comments[Math.floor(Math.random() * comments.length)]}`;
    }

    return resultText;
  }

  /**
   * Gera coment√°rios baseados nos efeitos da decis√£o
   */
  static generateEffectComments(effects) {
    const comments = [];

    if (effects.satisfacao_popular > 5) {
      comments.push('Seu povo t√° feliz√£o com essa decis√£o!');
      comments.push('A galera aprovou! Voc√™ ganhou uns pontos a√≠.');
    } else if (effects.satisfacao_popular < -5) {
      comments.push('Eita! Seu povo n√£o curtiu nada essa decis√£o...');
      comments.push('A popula√ß√£o t√° pistola com voc√™!');
    }

    if (effects.economia > 5) {
      comments.push('Boa! A economia deu uma melhorada.');
      comments.push('O PIB agradece essa decis√£o!');
    } else if (effects.economia < -5) {
      comments.push('Opa... a economia n√£o gostou muito disso.');
      comments.push('O bolso do povo sentiu essa decis√£o...');
    }

    if (effects.corrupcao > 3) {
      comments.push('Hmm... parece que rolou umas negociatas a√≠...');
      comments.push('A transpar√™ncia n√£o foi o forte dessa decis√£o.');
    } else if (effects.corrupcao < -3) {
      comments.push('Parab√©ns! Voc√™ limpou a casa!');
      comments.push('A transpar√™ncia aumentou! O povo reconhece.');
    }

    if (effects.seguranca > 5) {
      comments.push('As ruas ficaram mais seguras!');
      comments.push('A criminalidade deu uma diminu√≠da.');
    } else if (effects.seguranca < -5) {
      comments.push('Opa... a seguran√ßa piorou um pouco.');
      comments.push('O povo t√° com medo de sair de casa...');
    }

    return comments;
  }

  /**
   * Converte nome do indicador para exibi√ß√£o
   */
  static getIndicatorDisplayName(indicator) {
    const names = {
      economia: 'Economia',
      educacao: 'Educa√ß√£o',
      saude: 'Sa√∫de',
      seguranca: 'Seguran√ßa',
      cultura: 'Cultura',
      satisfacao_popular: 'Satisfa√ß√£o Popular',
      corrupcao: 'Corrup√ß√£o'
    };
    return names[indicator] || indicator;
  }

  /**
   * Converte para objeto JSON
   */
  toJSON() {
    return {
      id: this.id,
      title: this.title,
      description: this.description,
      options: this.options,
      category: this.category,
      difficulty: this.difficulty,
      created_at: this.created_at
    };
  }
}

module.exports = Decision;

